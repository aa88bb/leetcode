/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int len1=0;
        int len2=0;
        ListNode* p1=l1;
        ListNode* p2=l2;
        while(p1){
            len1++;
            p1=p1->next;
        }
        while(p2){
            len2++;
            p2=p2->next;
        }
        ListNode* big;
        ListNode* small;
        if(len1>=len2){
            big = l1;
            small = l2;
        }
        if(len1<len2){
            big = l2;
            small = l1;
        }
        p1=big;
        p2=small;
        for(int i=abs(len1-len2);i>0;i--){
            p1=p1->next;
        }
        while(p1){
            p1->val=p1->val+p2->val;
            p1=p1->next;
            p2=p2->next;
        }
        //以上的操作全都是用来把两个按相应位list加起来，有些位可能大于等于10，接下来是进位操作
        //先在头部开一个进位空间
        ListNode* new_node = new ListNode(0);
        new_node->next=big;
        big=new_node;
        for(p1=big,p2=big;p1;p1=p1->next){
            if(p1->val<9){
                p2=p1;
                continue;
            }
            if(p1->val==9){
                continue;
            }
            if(p1->val>9){
                p2->val++;
                p1->val=p1->val%10;
                p2=p2->next;
                while(p1!=p2){
                    p2->val = 0;
                    p2=p2->next;
                }
            }
        }
        if(!big->val){//忽略头部的0
            big=big->next;
        }
        return big;
    }
};
